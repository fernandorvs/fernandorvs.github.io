
CodeMirror.defineSimpleMode("taip", {
  // The start state contains the rules that are intially used
  start: [
    // The regex matches the token, the token property contains the type
    {regex: /"(?:[^\\]|\\.)*?(?:"|$)/, token: "string"},
    // You can match multiple tokens at once. Note that the captured
    // groups must span the whole string in this case
    {regex: /(function)(\s+)([a-z$][\w$]*)/, token: ["keyword", null, "variable-2"]},
    // Rules are matched in the order in which they appear, so there is
    // no ambiguity between this one and the one above
    {regex: /(?:QID|SAT|SID|SCB|SDB|STX|SXB|SFM|STY|QIO|SPW|QPW|SSSXP|SSXP|SAU|SIP|QIP|CBU|QBU|SCID|QCID|SSM|QSM|QVR|SSSU|SSG|QPIN|SPIN|SEVGN|SRPT|G|SGPRSH|SRL|QRL|STD|QTD|QSS|SCOP|QCOP|SSSGPSPW|SSSCELPW|SSSIGN|SVCC|SVCH|SDS|QDS|SWP|QWP|SVL|QVL|STR|QTR|SAR|QAR|SDC|QDC|SDV|QDV|QTAG|STAG|QAIN|QIMEI|SSC|SVEL|QIT|SIT|QCX|SCX|QOD|SOD|QSN|SFACTORY|SRESET|SICL|QICL|SIC|QIC|SIC|QDT|QUT|QAC|SSIM|QSIM|SKO|QKO|SMC|QMC|SFRM|QFRM|QHO|SHO|QPK|SPK|STEST|SLC)\b/, token: "keyword"},
    {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i, token: "number"},
    {regex: /\/\/.*/, token: "comment"},
    {regex: /\/(?:[^\\]|\\.)*?\//, token: "variable-3"},
    // A next property will cause the mode to move to a different state
    {regex: /\/\*/, token: "comment", next: "comment"},
    {regex: /[-+\/*=<>!]+/, token: "operator"},
    {regex: /[a-z$][\w$]*/, token: "variable"}
  ],
  // The multi-line comment state.
  comment: [
    {regex: /.*?\*\//, token: "comment", next: "start"},
    {regex: /.*/, token: "comment"}
  ],
  // The meta property contains global information about the mode. It
  // can contain properties like lineComment, which are supported by
  // all modes, and also directives like dontIndentStates, which are
  // specific to simple modes.
  meta: {
    dontIndentStates: ["comment"],
    lineComment: "//"
  }
});

CodeMirror.defineMIME("text/taip", "taip");
